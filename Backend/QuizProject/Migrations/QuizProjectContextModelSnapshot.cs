// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizProject.Models;

#nullable disable

namespace QuizProject.Migrations
{
    [DbContext(typeof(QuizProjectContext))]
    partial class QuizProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizProject.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryInfo")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId")
                        .HasName("PK_Categories_CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("QuizProject.Models.CategoryRelationship", b =>
                {
                    b.Property<Guid>("CategoryParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryChildId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryParentId", "CategoryChildId");

                    b.HasIndex(new[] { "CategoryParentId" }, "KEY_CategoryRelationship_Categ")
                        .IsUnique();

                    b.ToTable("CategoryRelationship", (string)null);
                });

            modelBuilder.Entity("QuizProject.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChoicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuestionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("QuestionId")
                        .HasName("PK_Questions_QuestionId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizProject.Models.QuestionChoice", b =>
                {
                    b.Property<Guid>("ChoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ChoiceImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ChoiceText")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChoiceId")
                        .HasName("PK_QuestionChoices_ChoiceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionChoices");
                });

            modelBuilder.Entity("QuizProject.Models.CategoryRelationship", b =>
                {
                    b.HasOne("QuizProject.Models.Category", "CategoryParent")
                        .WithOne("CategoryRelationship")
                        .HasForeignKey("QuizProject.Models.CategoryRelationship", "CategoryParentId")
                        .IsRequired()
                        .HasConstraintName("FK_CategoryRelationship_CategoryParentId");

                    b.Navigation("CategoryParent");
                });

            modelBuilder.Entity("QuizProject.Models.Question", b =>
                {
                    b.HasOne("QuizProject.Models.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Questions_CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuizProject.Models.QuestionChoice", b =>
                {
                    b.HasOne("QuizProject.Models.Question", "Question")
                        .WithMany("QuestionChoices")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionChoices_QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizProject.Models.Category", b =>
                {
                    b.Navigation("CategoryRelationship");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizProject.Models.Question", b =>
                {
                    b.Navigation("QuestionChoices");
                });
#pragma warning restore 612, 618
        }
    }
}
