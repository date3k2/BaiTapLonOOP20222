// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizProject.Models;

#nullable disable

namespace QuizProject.Migrations
{
    [DbContext(typeof(QuizProjectContext))]
    partial class QuizProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizProject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), -1L);

                    b.Property<string>("CategoryInfo")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK_Categories_CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("QuizProject.Models.CategoryRelationship", b =>
                {
                    b.Property<int>("CategoryParentId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryChildId")
                        .HasColumnType("int");

                    b.HasKey("CategoryParentId", "CategoryChildId");

                    b.ToTable("CategoryRelationship", (string)null);
                });

            modelBuilder.Entity("QuizProject.Models.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("MoreThanOneChoice")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionCode")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionMediaPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId")
                        .HasName("PK_Questions_QuestionId");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Questions_CategoryId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizProject.Models.QuestionChoice", b =>
                {
                    b.Property<Guid>("ChoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ChoiceMark")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ChoiceMediaPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChoiceText")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChoiceId")
                        .HasName("PK_QuestionChoices_ChoiceId");

                    b.HasIndex(new[] { "QuestionId" }, "IX_QuestionChoices_QuestionId");

                    b.ToTable("QuestionChoices");
                });

            modelBuilder.Entity("QuizProject.Models.Quiz", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CloseTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsShuffle")
                        .HasColumnType("bit");

                    b.Property<double>("MaxGrade")
                        .HasColumnType("float");

                    b.Property<DateTime?>("OpenTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuizDescription")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ShowDescription")
                        .HasColumnType("bit");

                    b.Property<int?>("TimeLimitInSeconds")
                        .HasColumnType("int");

                    b.HasKey("QuizId")
                        .HasName("PK_Quiz_QuizId");

                    b.ToTable("Quiz", null, t =>
                        {
                            t.HasComment("Bảng câu hỏi");
                        });
                });

            modelBuilder.Entity("QuizQuestion", b =>
                {
                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuizId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuizQuestion", (string)null);
                });

            modelBuilder.Entity("QuizProject.Models.CategoryRelationship", b =>
                {
                    b.HasOne("QuizProject.Models.Category", "CategoryParent")
                        .WithMany("CategoryRelationships")
                        .HasForeignKey("CategoryParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CategoryRelationship_CategoryParentId");

                    b.Navigation("CategoryParent");
                });

            modelBuilder.Entity("QuizProject.Models.Question", b =>
                {
                    b.HasOne("QuizProject.Models.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Questions_CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("QuizProject.Models.QuestionChoice", b =>
                {
                    b.HasOne("QuizProject.Models.Question", "Question")
                        .WithMany("QuestionChoices")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionChoices_QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizQuestion", b =>
                {
                    b.HasOne("QuizProject.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QuizQuestion_QuestionId");

                    b.HasOne("QuizProject.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK_QuizQuestion_QuizId");
                });

            modelBuilder.Entity("QuizProject.Models.Category", b =>
                {
                    b.Navigation("CategoryRelationships");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizProject.Models.Question", b =>
                {
                    b.Navigation("QuestionChoices");
                });
#pragma warning restore 612, 618
        }
    }
}
